{
  "folders": [{
    "path": "."
  }]
  // "settings": {
  //   "folderTemplates.structures": [{
  //     "name": "NewJekyllPlugInAsRubyGem",
  //     "customVariables": [
  //       "Company=>KargWare",
  //       "Project=>JekyllPlugInTemplate"
  //     ],
  //     "omitParentDirectory": true,
  //     "structure": [
  //       {
  //         "fileName": "lib/jekyll/<Company>/<Project>/configuration.rb",
  //         "template": "NewJekyllPlugInAsRubyGem-lib/jekyll/KargWare/PlugInTemplate/configuration.rb"
  //       },
  //       {
  //         "fileName": "lib/jekyll/<Company>/<Project>.rb",
  //         "template": "NewJekyllPlugInAsRubyGem-lib/jekyll/KargWare/PlugInTemplate.rb"
  //       },
  //       {
  //         "fileName": "test/jekyll/<Company>/<Project>/configuration_test.rb",
  //         "template": "NewJekyllPlugInAsRubyGem-test/jekyll/KargWare/PlugInTemplate/configuration_test.rb"
  //       }
  //     ]
  //   }],
  //   "folderTemplates.fileTemplates": {
  //     "NewJekyllPlugInAsRubyGem-lib/jekyll/KargWare/PlugInTemplate/configuration.rb": [
  //       "# frozen_string_literal: true",
  //       "",
  //       "module Jekyll",
  //       "  module <Company>",
  //       "    module <Project>",
  //       "      # <Project> configuration class",
  //       "      class Configuration",
  //       "        attr_accessor :my_integer, :my_float, :my_boolean, :my_string",
  //       "",
  //       "        DEFAULT_CONFIG = {",
  //       "          'my_integer' => 1,",
  //       "          'my_float' => 2.4,",
  //       "          'my_boolean' => true,",
  //       "          'my_string' => 'foo bar'",
  //       "        }.freeze",
  //       "",
  //       "        def initialize(options)",
  //       "          options = generate_option_hash(options)",
  //       "",
  //       "          @my_integer = options['my_integer']",
  //       "          @my_float = options['my_float']",
  //       "          @my_boolean = options['my_boolean']",
  //       "          @my_string = options['my_string']",
  //       "        end",
  //       "",
  //       "        private",
  //       "",
  //       "        def generate_option_hash(options)",
  //       "          DEFAULT_CONFIG.merge(options)",
  //       "        rescue TypeError",
  //       "          DEFAULT_CONFIG",
  //       "        end",
  //       "      end",
  //       "    end",
  //       "  end",
  //       "end",
  //       ""
  //     ],
  //     "NewJekyllPlugInAsRubyGem-lib/jekyll/KargWare/PlugInTemplate.rb": [
  //       "# frozen_string_literal: true",
  //       "",
  //       "module Jekyll",
  //       "  module <Company>",
  //       "    module <Project>",
  //       "      class Error < StandardError; end",
  //       "      class Exception < Gem::Exception; end",
  //       "",
  //       "      # Your code goes here...",
  //       "    end",
  //       "  end",
  //       "end",
  //       ""
  //     ],
  //     "NewJekyllPlugInAsRubyGem-test/jekyll/KargWare/PlugInTemplate/configuration_test.rb": [
  //       "# frozen_string_literal: true",
  //       "",
  //       "require 'test_helper'",
  //       "require 'jekyll/<Company>/<Project>/configuration'",
  //       "",
  //       "module Jekyll",
  //       "  module <Company>",
  //       "    module <Project>",
  //       "      # Test the <Project> configuration",
  //       "      class ConfigurationTest < Minitest::Test",
  //       "        def test_default_configuration",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new({})",
  //       "",
  //       "          assert_equal 1, configuration.my_integer",
  //       "          assert_equal 2.4, configuration.my_float",
  //       "          assert_equal true, configuration.my_boolean",
  //       "          assert_equal 'foo bar', configuration.my_string",
  //       "        end",
  //       "",
  //       "        def test_type_error_in_configuration",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new('TypeError!')",
  //       "",
  //       "          assert_equal 1, configuration.my_integer",
  //       "          assert_equal 2.4, configuration.my_float",
  //       "          assert_equal true, configuration.my_boolean",
  //       "          assert_equal 'foo bar', configuration.my_string",
  //       "        end",
  //       "",
  //       "        def test_configuration_change_integer",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new('my_integer' => 5)",
  //       "",
  //       "          assert_equal 5, configuration.my_integer",
  //       "          assert_equal 2.4, configuration.my_float",
  //       "          assert_equal true, configuration.my_boolean",
  //       "          assert_equal 'foo bar', configuration.my_string",
  //       "        end",
  //       "",
  //       "        def test_configuration_change_float",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new({ 'my_float' => 6.66 })",
  //       "",
  //       "          assert_equal 1, configuration.my_integer",
  //       "          assert_equal 6.66, configuration.my_float",
  //       "          assert_equal true, configuration.my_boolean",
  //       "          assert_equal 'foo bar', configuration.my_string",
  //       "        end",
  //       "",
  //       "        def test_configuration_change_boolean",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new({ 'my_boolean' => false })",
  //       "",
  //       "          assert_equal 1, configuration.my_integer",
  //       "          assert_equal 2.4, configuration.my_float",
  //       "          assert_equal false, configuration.my_boolean",
  //       "          assert_equal 'foo bar', configuration.my_string",
  //       "        end",
  //       "",
  //       "        def test_configuration_change_string",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new({ 'my_string' => 'bar foo' })",
  //       "",
  //       "          assert_equal 1, configuration.my_integer",
  //       "          assert_equal 2.4, configuration.my_float",
  //       "          assert_equal true, configuration.my_boolean",
  //       "          assert_equal 'bar foo', configuration.my_string",
  //       "        end",
  //       "",
  //       "        def test_configuration_change_all",
  //       "          configuration = Jekyll::<Company>::<Project>::Configuration.new({ 'my_integer' => 42, 'my_float' => 1.23, 'my_boolean' => false, 'my_string' => 'testing ...' })",
  //       "",
  //       "          assert_equal 42, configuration.my_integer",
  //       "          assert_equal 1.23, configuration.my_float",
  //       "          assert_equal false, configuration.my_boolean",
  //       "          assert_equal 'testing ...', configuration.my_string",
  //       "        end",
  //       "      end",
  //       "    end",
  //       "  end",
  //       "end",
  //       ""
  //     ]
  //   }
  // }
}